# .github/workflows/ci-cd.yml
name: Build, Push & Deploy to ECS

on:
  push:
    branches:
      - main
      - staging
      - production

permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION:     us-east-1
      ECR_REPOSITORY: react-resume
      CONTAINER_NAME: resume

      CLUSTER_MAP: '{"main":"biotornic-dev-ecs-cluster","staging":"biotornic-stg-ecs-cluster","production":"biotornic-prod-ecs-cluster"}'
      SERVICE_MAP: '{"main":"dev-resume","staging":"stg-resume","production":"prod-resume"}'
      TAG_MAP:     '{"main":"dev","staging":"staging","production":"production"}'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.4.0
        with:
          fetch-depth: 0

      - name: Set branch‐specific variables
        shell: bash
        run: |
          REF=${GITHUB_REF#refs/heads/}
          ECS_CLUSTER_NAME=$(echo $CLUSTER_MAP | jq -r .["$REF"])
          ECS_SERVICE_NAME=$(echo $SERVICE_MAP | jq -r .["$REF"])
          IMAGE_ALIAS=$(echo $TAG_MAP | jq -r .["$REF"])
          echo "ECS_CLUSTER_NAME=$ECS_CLUSTER_NAME" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=$ECS_SERVICE_NAME" >> $GITHUB_ENV
          echo "IMAGE_ALIAS=$IMAGE_ALIAS" >> $GITHUB_ENV

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4.4.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:      ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - id: build-image
        name: Build & push image (SHA tag only)
        uses: docker/build-push-action@v3.7.0
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Fetch active task definition
        run: |
          aws ecs describe-services \
            --cluster "$ECS_CLUSTER_NAME" \
            --services "$ECS_SERVICE_NAME" \
            --query 'services[0].taskDefinition' \
            --output text > current-td-arn.txt

          aws ecs describe-task-definition \
            --task-definition "$(cat current-td-arn.txt)" \
            --query 'taskDefinition' \
            --output json > task-definition.json

      - name: Render new task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name:   ${{ env.CONTAINER_NAME }}
          image:            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition:            ${{ steps.render-task-def.outputs.task-definition }}
          service:                    ${{ env.ECS_SERVICE_NAME }}
          cluster:                    ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true

      - name: Tag & push branch‐alias tag
        if: success()
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          echo "Tagging $IMAGE_URI:${{ github.sha }} as $IMAGE_URI:$IMAGE_ALIAS"
          docker tag "$IMAGE_URI:${{ github.sha }}" "$IMAGE_URI:$IMAGE_ALIAS"
          docker push "$IMAGE_URI:$IMAGE_ALIAS"
